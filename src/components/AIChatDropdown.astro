---
import DropdownButton from './DropdownButton.astro';
import { useTranslations } from '~/i18n/util';
import { getLanguageFromURL } from '~/util';

const lang = getLanguageFromURL(Astro.url.pathname);
const t = useTranslations(Astro);

// Define the primary action (Copy Page)
const primaryAction = {
	id: 'copyPage',
	label: t('aiChat.copyPage'),
	icon: 'pi pi-copy'
};

// Define the secondary options
const secondaryOptions = [
	{
		id: 'viewMarkdown',
		label: t('aiChat.viewMarkdown'),
		icon: 'pi pi-file'
	},
	{
		id: 'openChatGPT',
		label: t('aiChat.openChatGPT'),
		logo: '/logos/openai.svg'
	},
	{
		id: 'openClaude',
		label: t('aiChat.openClaude'),
		logo: '/logos/claude.svg'
	}
];
---

<div class="ai-chat-dropdown-wrapper">
	<!-- Simple test split button -->
	<div class="test-split-button">
		<button class="test-primary p-button p-component" data-action="copyPage" id="testPrimary">
			<i class="pi pi-copy mr-2"></i>
			{primaryAction.label}
		</button>
		<button class="test-dropdown p-button p-component" id="testDropdown">
			<i class="pi pi-chevron-down"></i>
		</button>
	</div>
	
	<!-- Dropdown panel -->
	<div class="test-panel" id="testPanel">
		<ul>
			{secondaryOptions.map((option) => (
				<li>
					<button type="button" data-action={option.id} class="test-option">
						<span class="icon-container">
							{option.logo ? (
								<img src={option.logo} alt={option.label} width="16" height="16" />
							) : (
								<i class={option.icon}></i>
							)}
						</span>
						{option.label}
					</button>
				</li>
			))}
		</ul>
	</div>
</div>

<script>
	class AIChatDropdown {
		constructor() {
			this.wrapper = document.querySelector('.ai-chat-dropdown-wrapper');
			this.primaryButton = document.getElementById('testPrimary');
			this.dropdownButton = document.getElementById('testDropdown');
			this.panel = document.getElementById('testPanel');
			this.isOpen = false;
			this.originalButtonText = null;
			this.init();
		}
		
		init() {
			if (!this.wrapper || !this.primaryButton || !this.dropdownButton || !this.panel) return;
			
			// Primary button click (Copy Page)
			this.primaryButton.addEventListener('click', (e) => {
				e.stopPropagation();
				const action = this.primaryButton.dataset.action;
				this.handleAction(action);
			});
			
			// Dropdown toggle
			this.dropdownButton.addEventListener('click', (e) => {
				e.stopPropagation();
				this.toggle();
			});
			
			// Option clicks
			this.panel.addEventListener('click', (e) => {
				e.stopPropagation();
				const option = e.target.closest('.test-option');
				if (option) {
					const action = option.dataset.action;
					this.handleAction(action);
					this.close();
				}
			});
			
			// Close when clicking outside
			document.addEventListener('click', () => {
				this.close();
			});
		}
		
		toggle() {
			this.isOpen ? this.close() : this.open();
		}
		
		open() {
			this.panel.classList.add('show');
			this.dropdownButton.classList.add('active');
			this.isOpen = true;
		}
		
		close() {
			this.panel.classList.remove('show');
			this.dropdownButton.classList.remove('active');
			this.isOpen = false;
		}
		
		handleAction(actionId) {
			const currentUrl = window.location.href;
			
			switch (actionId) {
				case 'copyPage':
					this.copyPageContent();
					break;
				case 'viewMarkdown':
					this.viewAsMarkdown(currentUrl);
					break;
				case 'openChatGPT':
					this.openChatGPT(currentUrl);
					break;
				case 'openClaude':
					this.openClaude(currentUrl);
					break;
			}
		}
		
		async copyPageContent() {
			try {
				// Change button text to "Copied"
				this.updateButtonText('Copied');
				
				const currentUrl = window.location.href;
				// Convert URL to markdown format (same as viewAsMarkdown)
				let markdownUrl = currentUrl.replace(/\/$/, '') + '.md';
				
				// For local development, replace localhost with production URL
				if (markdownUrl.includes('localhost:4321')) {
					markdownUrl = markdownUrl.replace('http://localhost:4321/', 'https://www.azion.com/');
				}
				
				// Fetch the markdown content
				const response = await fetch(markdownUrl);
				if (!response.ok) {
					throw new Error(`Failed to fetch markdown: ${response.status}`);
				}
				
				const markdownContent = await response.text();
				
				// Copy to clipboard
				await navigator.clipboard.writeText(markdownContent);
				
				// Show feedback
				this.showFeedback('Page content copied to clipboard!');
				
				// Reset button text after 2 seconds
				setTimeout(() => {
					this.resetButtonText();
				}, 2000);
			} catch (err) {
				console.error('Failed to copy content:', err);
				this.showFeedback('Failed to copy content. Please try again.');
				// Reset button text on error
				this.resetButtonText();
			}
		}
		
		viewAsMarkdown(url) {
			// Convert URL to markdown format
			let markdownUrl = url.replace(/\/$/, '') + '.md';
			
			// For local development, replace localhost with production URL
			if (markdownUrl.includes('localhost:4321')) {
				markdownUrl = markdownUrl.replace('http://localhost:4321/', 'https://www.azion.com/');
			}
			
			window.open(markdownUrl, '_blank');
		}
		
		openChatGPT(url) {
			const prompt = encodeURIComponent(`Read this page from the Azion docs: ${url} and answer questions about the content.`);
			const chatGptUrl = `https://chat.openai.com/?prompt=${prompt}`;
			window.open(chatGptUrl, '_blank');
		}
		
		openClaude(url) {
			const prompt = encodeURIComponent(`Read this page from the Azion docs: ${url} and answer questions about the content.`);
			const claudeUrl = `https://claude.ai/new?q=${prompt}`;
			window.open(claudeUrl, '_blank');
		}
		
		updateButtonText(newText) {
			// Store original text if not already stored
			if (!this.originalButtonText) {
				this.originalButtonText = this.primaryButton.textContent.trim();
			}
			
			// Replace the entire content but keep the icon
			this.primaryButton.innerHTML = `<i class="pi pi-copy mr-2"></i>${newText}`;
		}
		
		resetButtonText() {
			if (this.originalButtonText) {
				// Restore original content with icon
				this.primaryButton.innerHTML = `<i class="pi pi-copy mr-2"></i>${this.originalButtonText}`;
			}
		}
		
		showFeedback(message) {
			// Create a simple toast notification
			const toast = document.createElement('div');
			toast.className = 'ai-chat-toast';
			toast.textContent = message;
			document.body.appendChild(toast);
			
			setTimeout(() => {
				toast.classList.add('show');
			}, 100);
			
			setTimeout(() => {
				toast.classList.remove('show');
				setTimeout(() => {
					document.body.removeChild(toast);
				}, 300);
			}, 3000);
		}
	}
	
	// Initialize when DOM is loaded
	document.addEventListener('DOMContentLoaded', () => {
		new AIChatDropdown();
	});
</script>

<style lang="scss">
	.ai-chat-dropdown-wrapper {
		position: relative;
		display: inline-block;
	}
	
	.test-split-button {
		display: inline-flex;
		
		.test-primary {
			border-top-right-radius: 0;
			border-bottom-right-radius: 0;
			border-right: none;
			padding: 0.275rem 0.75rem;
			font-size: 0.875rem;
			background: var(--surface-card, #fff);
			margin-right: 2px;
			
			&:focus {
				z-index: 1;
			}
		}
		
		.test-dropdown {
			border-top-left-radius: 0;
			border-bottom-left-radius: 0;
			padding: 0.275rem 0.75rem;
			font-size: 0.675rem;
			min-width: 10px;
			background: var(--surface-card, #fff);
			i {
				transition: transform 0.2s ease;
			}
			
			&.active i {
				transform: rotate(180deg);
			}
		}
	}
	
	.test-panel {
		position: absolute;
		top: 100%;
		left: 0;
		min-width: 160px;
		z-index: 1000;
		opacity: 0;
		visibility: hidden;
		transform: translateY(-10px);
		transition: all 0.2s ease;
		background: var(--surface-card, #fff);
		border: 1px solid var(--surface-border, #ddd);
		border-radius: 4px;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
		font-size: 0.175rem;
		
		&.show {
			opacity: 1;
			visibility: visible;
			transform: translateY(0);
		}
		
		ul {
			list-style: none;
			margin: 0;
			padding: 0;
		}
		
		li {
			border-bottom: 1px solid var(--surface-border, #eee);
			
			&:last-child {
				border-bottom: none;
			}
		}
		
		.test-option {
			display: flex;
			align-items: center;
			width: 100%;
			padding: 0.5rem 0.75rem;
			background: none;
			border: none;
			text-align: left;
			color: var(--text-color, #333);
			cursor: pointer;
			transition: background-color 0.2s ease;
			font-size: 0.775rem;
			
			&:hover {
				background: var(--surface-hover, rgba(0, 0, 0, 0.05));
			}
			
			// Icon container for consistent alignment
			.icon-container {
				display: inline-flex;
				align-items: center;
				justify-content: center;
				width: 16px;
				height: 16px;
				margin-right: 0.5rem;
				flex-shrink: 0;
			}
			
			img {
				width: 16px;
				height: 16px;
				object-fit: contain;
				vertical-align: middle;
			}
			
			i {
				font-size: 14px;
				line-height: 1;
				vertical-align: middle;
			}
		}
	}
	
	.ai-chat-toast {
		position: fixed;
		bottom: 20px;
		right: 20px;
		background: var(--primary-color, #5e5e5e);
		color: var(--primary-color-text, #fff);
		padding: 0.75rem 1rem;
		border-radius: 4px;
		font-size: 0.175rem;
		opacity: 0;
		transform: translateY(20px);
		transition: all 0.3s ease;
		z-index: 10000;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
		
		&.show {
			opacity: 1;
			transform: translateY(0);
		}
	}
</style>
