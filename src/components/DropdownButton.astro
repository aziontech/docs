---
export interface DropdownOption {
	id: string;
	label: string;
	icon?: string;
	logo?: string;
}

export interface Props {
	primaryAction: {
		id: string;
		label: string;
		icon?: string;
	};
	secondaryOptions: DropdownOption[];
}

const { primaryAction, secondaryOptions } = Astro.props;
---

<div class="split-dropdown-wrapper">
	<div class="split-button-group">
		<!-- Primary Button -->
		<button 
			class="primary-action-button p-button p-component" 
			type="button"
			data-action={primaryAction.id}
			id="primaryButton"
		>
			{primaryAction.icon && <i class={`${primaryAction.icon} mr-2`}></i>}
			{primaryAction.label}
		</button>
		
		<!-- Dropdown Toggle Button -->
		<button 
			class="dropdown-toggle-button p-button p-component" 
			type="button"
			id="dropdownToggle"
		>
			<i class="pi pi-chevron-down"></i>
		</button>
	</div>
	
	<!-- Dropdown Panel -->
	<div class="dropdown-panel p-component" id="dropdownPanel">
		<ul class="dropdown-menu" role="menu">
			{secondaryOptions.map((option) => (
				<li class="dropdown-item" role="none">
					<button 
						class="dropdown-item-button" 
						type="button"
						data-action={option.id}
					>
						{option.logo ? (
							<img src={option.logo} alt={option.label} width="16" height="16" class="mr-2" />
						) : option.icon ? (
							<i class={`${option.icon} mr-2`}></i>
						) : null}
						{option.label}
					</button>
				</li>
			))}
		</ul>
	</div>
</div>

<script>
	class DropdownButton {
		constructor() {
			this.wrapper = document.querySelector('.split-dropdown-wrapper');
			this.primaryButton = document.getElementById('primaryButton');
			this.dropdownToggle = document.getElementById('dropdownToggle');
			this.panel = document.getElementById('dropdownPanel');
			this.isOpen = false;
			
			this.init();
		}
		
		init() {
			if (!this.primaryButton || !this.dropdownToggle || !this.panel) return;
			
			// Primary button click
			this.primaryButton.addEventListener('click', (e) => {
				e.stopPropagation();
				const action = this.primaryButton.dataset.action;
				this.handleAction(action);
			});
			
			// Dropdown toggle click
			this.dropdownToggle.addEventListener('click', (e) => {
				e.stopPropagation();
				this.toggle();
			});
			
			// Close dropdown when clicking outside
			document.addEventListener('click', () => {
				this.close();
			});
			
			// Handle secondary option clicks
			this.panel.addEventListener('click', (e) => {
				e.stopPropagation();
				const button = e.target.closest('.dropdown-item-button');
				if (button) {
					const action = button.dataset.action;
					this.handleAction(action);
					this.close();
				}
			});
		}
		
		toggle() {
			this.isOpen ? this.close() : this.open();
		}
		
		open() {
			this.panel.classList.add('show');
			this.dropdownToggle.classList.add('active');
			this.isOpen = true;
		}
		
		close() {
			this.panel.classList.remove('show');
			this.dropdownToggle.classList.remove('active');
			this.isOpen = false;
		}
		
		handleAction(actionId) {
			// Dispatch custom event that parent components can listen to
			const event = new CustomEvent('dropdown-action', {
				detail: { actionId },
				bubbles: true
			});
			this.wrapper.dispatchEvent(event);
		}
	}
	
	// Initialize when DOM is loaded
	document.addEventListener('DOMContentLoaded', () => {
		new DropdownButton();
	});
</script>

<style lang="scss">
	.split-dropdown-wrapper {
		position: relative;
		display: inline-block;
	}
	
	.split-button-group {
		display: inline-flex;
		
		.primary-action-button {
			border-top-right-radius: 0;
			border-bottom-right-radius: 0;
			border-right: none;
			
			&:focus {
				z-index: 1;
			}
		}
		
		.dropdown-toggle-button {
			border-top-left-radius: 0;
			border-bottom-left-radius: 0;
			min-width: auto;
			padding: 0.5rem 0.75rem;
			
			i {
				transition: transform 0.2s ease;
			}
			
			&.active i {
				transform: rotate(180deg);
			}
		}
	}
	
	.dropdown-panel {
		position: absolute;
		top: 100%;
		left: 0;
		min-width: 200px;
		z-index: 1000;
		opacity: 0;
		visibility: hidden;
		transform: translateY(-10px);
		transition: all 0.2s ease;
		background: var(--surface-card);
		border: 1px solid var(--surface-border);
		border-radius: var(--border-radius);
		box-shadow: var(--shadow-4);
		
		&.show {
			opacity: 1;
			visibility: visible;
			transform: translateY(0);
		}
		
		.dropdown-menu {
			list-style: none;
			margin: 0;
			padding: 0;
		}
		
		.dropdown-item {
			.dropdown-item-button {
				display: flex;
				align-items: center;
				width: 100%;
				padding: 0.75rem 1rem;
				background: none;
				border: none;
				text-align: left;
				color: var(--text-color);
				cursor: pointer;
				transition: background-color 0.2s ease;
				
				&:hover {
					background: var(--surface-hover);
				}
				
				&:first-child {
					border-radius: var(--border-radius) var(--border-radius) 0 0;
				}
				
				&:last-child {
					border-radius: 0 0 var(--border-radius) var(--border-radius);
				}
				
				img, i {
					flex-shrink: 0;
				}
			}
		}
	}
</style>
