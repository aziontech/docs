---
import { cachedFetch } from '../util-server';
import UIString from './UIString.astro';

export interface Props {
  filePath?: string;
}

const { filePath: propFilePath } = Astro.props as Props;
const githubRepo = 'aziontech/docs';
const contributorsLink = `https://github.com/aziontech/docs/graphs/contributors`;

const printError = (e: Error) =>
  console.warn(`[error]  /src/components/ContributorList.astro\n         ${e?.message ?? e}`);

async function getAuthorsForFile(repo: string, filePath: string): Promise<{ login: string; id: number; commitCount: number }[]> {
  try {
    const url = `https://api.github.com/repos/${repo}/commits?path=${encodeURIComponent(filePath)}`;

    const token = import.meta.env.PUBLIC_GITHUB_TOKEN;

    const res = await cachedFetch(
      url,
      {
        method: 'GET',
        headers: {
          Authorization: token && `Basic ${Buffer.from(token, 'binary').toString('base64')}`,
          'User-Agent': 'aziontech.docs/1.0',
        },
      },
      { duration: '15m' }
    );

    const data = await res.json();

    if (!res.ok) {
      throw new Error(
        `Request to fetch commit history failed. Reason: ${res.statusText}
         Message: ${data?.message}`
      );
    }

    // Extract unique authors from commit history and calculate commit counts
    const commitCounts = new Map<string, number>();
    data.forEach((commit: any) => {
      const authorLogin = commit.author?.login ?? commit.commit.author.name;
      commitCounts.set(authorLogin, (commitCounts.get(authorLogin) || 0) + 1);
    });

    // Fetch user information for each author and include commit count
    const authorsWithCounts = await Promise.all(
      Array.from(commitCounts.keys()).map(async (login) => {
        const userUrl = `https://api.github.com/users/${login}`;
        const userRes = await cachedFetch(
          userUrl,
          {
            method: 'GET',
            headers: {
              Authorization: token && `Basic ${Buffer.from(token, 'binary').toString('base64')}`,
              'User-Agent': 'aziontech.docs/1.0',
            },
          },
          { duration: '15m' }
        );
        const userData = await userRes.json();
        return {
          login: userData.login,
          id: userData.id,
          commitCount: commitCounts.get(login) || 0,
        };
      })
    );

    // Sort authors based on commit counts in descending order
    const sortedAuthors = authorsWithCounts.sort((a, b) => b.commitCount - a.commitCount);

    return sortedAuthors;
  } catch (e: any) {
    printError(e);
    return new Array();
  }
}

const authors = propFilePath ? await getAuthorsForFile(githubRepo, propFilePath) : [];
const filteredAuthors = authors.filter((author) => author.login !== 'robsongajunior' && author.login !== 'lfsigreja');
---

<!-- Thanks to @5t3ph for https://smolcss.dev/#smol-avatar-list! -->
<div>
	<ul class="avatar-list">
		{
		filteredAuthors.map((item) => (
			<li>
			<a href={`https://github.com/${item.login}`}>
				<img
				alt={item.login}
				title={item.login}
				width="3rem"
				height="3rem"
				src={`https://avatars.githubusercontent.com/u/${item.id}?s=32`}
				loading="lazy"
				/>
			</a>
			</li>
		))
		}
	</ul>
	{
		authors.length === 0 && (
		<p>
			<a href={contributorsLink}>
			<UIString key="contributors.seeAll" />
			</a>
		</p>
		)
	}
</div>

<style>
	.title {
		margin-bottom: 1rem;
	}
	.avatar-list {
		--avatar-size: 2rem;
		--avatar-overlap: -0.2em;
		--avatar-row-spacing: 0.05em;
		--avatar-outline-width: 0.8px;
		--avatar-outline-offset: 0em;

		display: flex;
		flex-wrap: wrap;
		list-style: none;
		padding: var(--avatar-border);
		font-size: var(--avatar-size);
	}

	.avatar-list li {
		--avatar-row-margin: calc(
			var(--avatar-outline-offset) + var(--avatar-outline-width) + var(--avatar-row-spacing) / 2
		);
		margin: var(--avatar-row-margin) var(--avatar-overlap) var(--avatar-row-margin) 0;
	}

	.avatar-list img,
	.avatar-list a {
		display: block;
		border-radius: 50%;
		max-width: 100%;
		height: var(--avatar-size);
		/* Hide alt/title if Avatar image fails to load. */
		text-decoration: none;
		color: transparent;
	}

	.avatar-list img {
		width: 100%;
		height: 100%;
		object-fit: cover;
		background-color: var(--theme-bg);
		box-shadow:
			0 0 0 var(--avatar-outline-width) var(--theme-divider),
			0 0 0 var(--avatar-outline-offset) var(--theme-bg),
			0 0 0 calc(var(--avatar-outline-offset) + var(--avatar-outline-width)) var(--theme-divider),
			0 0 calc(var(--theme-glow-blur) + var(--avatar-outline-offset)) var(--theme-glow-diffuse);
		/* Indicates the contributor image boundaries for forced colors users, transparent is changed to a solid color */
		outline: 1px solid transparent;
	}

	.avatar-list a:focus {
		outline: 2px solid var(--theme-accent);
		outline-offset: var(--avatar-outline-offset);
	}
</style>
