---
export interface Props {
	currentPage: string;
	menuType: string;
};

import { removeLeadingSlash,  getLanguageFromURL} from '~/util';
import { getNavigationMenu } from '~/util/getNav';
import { useTranslations } from '~/i18n/util';
import SidebarPanelMenu from '~/components/sidebarpanelmenu/SidebarPanelMenu.vue';

const t = useTranslations(Astro);
const lang = getLanguageFromURL(Astro.url.pathname);
const { currentPage, menuType = 'nav' } = Astro.props as Props;
const currentPageMatch = removeLeadingSlash(currentPage);

const sidebarSections = (await getNavigationMenu(Astro, menuType)).reduce((collection, item) => {
	collection.push({...item});
	return collection;
}, []);

function recursiveTranslation(menuList) {
	menuList.map(menu => {
		if(menu.hasLabel) {
			menu.hasLabel = t(menu.hasLabel);
		}
		
		if(menu.items) recursiveTranslation(menu.items);
	});
};
---
<div class="wrap-nav">
	<nav aria-label={t('leftSidebar.a11yTitle')} class="px-4">
		<SidebarPanelMenu
			client:idle 
			lang={lang}
			filterMobile={true}
			data={sidebarSections.map((item) => {
				if(item.hasLabel) item.hasLabel = t(item.hasLabel);
				if(item.items) recursiveTranslation(item.items); 
				
				return item;
			})}
			currentPageMatch={currentPageMatch} />
	</nav>
</div>

<script is:inline>
/**
 * Preserve sidebar scroll across page loads
 */
{
	const leftSidebar = document.querySelector('#left-sidebar');
	const nav = leftSidebar.querySelector('.sidebar nav');
	const leftSidebarScroll = localStorage.getItem('sidebar-scroll');
	
	if (leftSidebarScroll !== null) {
		nav.scrollTop = parseInt(leftSidebarScroll, 10);
	}

	window.addEventListener('beforeunload', () => {
		localStorage.setItem('sidebar-scroll', nav.scrollTop);
	});
}
</script>
