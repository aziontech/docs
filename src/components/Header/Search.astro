---
import './HeaderButton.css';

export interface Props {
	lang?: string;
	t: {
		button: string;
		placeholder: string;
		shortcutLabel: string;
	};
}

const { lang, t } = Astro.props as Props;
---

<button
	class="search-input header-button"
	type="button"
	aria-label={t.button}
	id="docsearch-search-button"
>
	<svg
		width="1em"
		height="1em"
		viewBox="0 0 24 24"
		fill="none"
		focusable="false"
		aria-hidden="true"
		role="img"
	>
		<path
			d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
			stroke="currentColor"
			stroke-width="2"
			stroke-linecap="round"
			stroke-linejoin="round"
			transform="translate(-1)"></path>
	</svg>
	<span class="search-placeholder">
		{t.button}
		<span class="sr-only"> {{ lang }}</span>
	</span>
</button>
<script is:inline>

function keyDownCode(e) {
	return (e.metaKey ? e.metaKey : e.ctrlKey) && e.keyCode;
}

let isModalOpen = false

function searchModalTogglerByKey(e) {
	if (keyDownCode(e) == 75) {
		e.preventDefault();
		searchModalHandler();
	}
	
	if (e.keyCode == 27) {
		const searchModal = document.getElementById('azalgoliasearch');
		if (isModalOpen && searchModal.classList.contains('enabled-search')) {
			e.preventDefault();
			searchModalHandler();
		}
	}
}

const searchModalHandler = () => {
	const searchModal = document.getElementById('azalgoliasearch');

	searchModal.classList.toggle('enabled-search');
	document.body.classList.toggle('overflow-none');

	isModalOpen = searchModal.classList.contains('enabled-search') ? true : false

	if (isModalOpen) document.getElementsByClassName('ais-SearchBox-input')[0].focus()
};

{
	document.addEventListener('keydown', searchModalTogglerByKey);
	document
		.getElementById('docsearch-search-button')
		.addEventListener('click', searchModalHandler);
}
</script>
<style>
	/** Style search header button */
	.search-input {
		position: relative;
		display: flex;
		place-items: center;
		gap: 0.25em;
	}

	.search-placeholder {
		text-align: initial;
		margin-inline-start: 0.25rem;
		margin-inline-end: 3rem;
		display: none;
		color: var(--color-text-medium-light);
	}

	@media (min-width: 50em) {
		.search-input {
			border-radius: 2px;
			padding-inline: 1rem;
			width: min(16.5rem, 100%);
		}

		.search-placeholder {
			display: flex;
		}

	}
</style>
