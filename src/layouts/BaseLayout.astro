---
import type { CollectionEntry } from 'astro:content';

import HeadCommon from '~/components/HeadCommon.astro';
import HeadSEO from '~/components/HeadSEO.astro';
import LeftSidebar from '~/components/LeftSidebar/LeftSidebar.astro';
import SidebarPanelMenu from '~/components/sidebarpanelmenu/SidebarPanelMenu.vue';
import GoogleTagManagerIframe from '~/components/trd3/google/tagmanager-iframe.astro';
import Trd3 from '~/components/html/trd3.astro';

// @ts-nocheck
import Header from 'azion-webkit/header';
import AzionLogo from 'azion-webkit/azionlogo';
import HeaderMenuTabPanel from 'azion-webkit/headermenutabpanel';
import HeaderSearchDialog from 'azion-webkit/headersearchdialog';
import HeaderRightSidebar from 'azion-webkit/headerrightsidebar';
import Footer from 'azion-webkit/footer';
import SystemStatus from 'azion-webkit/systemstatus';
import SelectLang from 'azion-webkit/selectlang';
import ThemeSwitcher from 'azion-webkit/dropdownthemeswitcher';

import { getLanguageFromURL, removeLeadingSlash } from '~/util';
// import { getPageCategory } from '~/util/getPageCategory';
import { getTranslatedPagesByNamespace } from '~/util/getPageTranslations';
import { getHeaderMenuStrings, getFooterMenuStrings } from '~/i18n/translations';

import { normalizeLangTag } from '~/i18n/bcp-normalize';
import { rtlLanguages } from '~/i18n/languages';
import { useTranslations } from '~/i18n/util';

export interface Props {
	content: CollectionEntry<'docs'>['data'];
}

import 'primeflex/primeflex.css';
import 'primeicons/primeicons.css';
import '~/styles/icons/azionicons.scss';
import '~/styles/main.css';
import 'azion-theme';
import '~/styles/avatar.css';
// import '~/styles/checkbox.css';
// import '~/styles/input.css';
import '~/styles/button.css';
// import '~/styles/tab-menu.css';
import '~/styles/breadcrumb.css';
import '~/styles/divider.css';

const { content } = Astro.props;
const isFallback = !!Astro.params.fallback;
const url = Astro.url;
const lang = getLanguageFromURL(url.pathname);
const direction = rtlLanguages.has(lang) ? 'rtl' : 'ltr';
const bcpLang = normalizeLangTag(lang);
const currentPage = url.pathname;
const t = useTranslations(Astro);
import { getNavigationMenu } from '~/util/getNav';
const currentPageMatch = removeLeadingSlash(currentPage);

// to right sidebar mobile menu
const sidebarSections = (await getNavigationMenu(Astro, 'nav')).reduce((collection, item) => {
	collection.push({...item});
	return collection;
}, []);

const {
	menuData,
	menuSecondary,
	menuSecondaryMobile,
	bottomButtonsMobile,
	algoliaIndex,
	algoliaModel,
	algoliaInputPlaceholder,
} = getHeaderMenuStrings(currentPage);

const {
	listData,
	copyright,
	cta,
	socialButtons
} = getFooterMenuStrings(currentPage);

const formatTitle = (content: { title?: string }) => {
	return content.title ? `${content.title} - ${t('site.title')}` : t('site.title');
};
// Ensures the canonicalURL always has a trailing slash.
const canonicalURL = new URL(Astro.url.pathname.replace(/([^/])$/, '$1/'), Astro.site);
if (isFallback) canonicalURL.pathname = canonicalURL.pathname.replace(`/${lang}/`, '/en/');

const translatedPages = await (async (c) => {
	return c.namespace ? await getTranslatedPagesByNamespace(c.namespace) : [];
})(content);
---

<html dir={direction} lang={bcpLang} class="azion azion-dark">
	<head>
		<HeadCommon />
		<HeadSEO {translatedPages} {content} {canonicalURL} />
		<title set:html={formatTitle(content)} />

		<style>
			#left-sidebar {
				display: none;
				z-index: 10;
				inset-inline-start: 0;
				max-height: 100%;
			}

			#right-sidebar {
				display: none;
				inset-inline-end: 0;
				z-index: 10;
				inset-inline-start: 0;
				max-height: 100%;

				.wrap-nav nav {
					margin-left: .5rem;
					width: 280px;
				}
			}

			#main-content {
				display: flex;
				flex-direction: column;
				height: 100%;
				min-width: 0;
			}

			.layout {
				display: grid;
				grid-template-columns: 1fr;
				height: 100%;
			}

			/**
			*
			* https://tailwindcss.com/docs/responsive-design
			* respecting the tailwind breakpoints
			*/
			@media (min-width: 1024px) {
				#left-sidebar {
					display: block;
					top: var(--theme-navbar-height);
					background: transparent;
					width: 20rem;
				}

				.layout {
					grid-template-columns: 20rem 1fr;
					gap: 1rem;
				}
			}

			@media (min-width: 1280px) {
				#right-sidebar {
					display: flex;
				}

				.layout {
					grid-template-columns: 20rem 1fr 20rem;
					gap: 1rem;
				}
			}

			.sidebar {
				position: sticky;
				top: 56px;
				height: 100%;
				max-height: 100vh;
				
				.wrap-nav {
					height: 100%;
					overflow: auto;
					scrollbar-gutter: stable;
				}
			}
		</style>
	</head>

	<body class="surface-ground">
		<GoogleTagManagerIframe />

		<script is:inline>
			const setTheme = (theme) => {
				const toggleTheme = () => {
					document.documentElement.classList.toggle('azion-dark')
					document.documentElement.classList.toggle('azion-light')
				}
		
				if (theme == 'Light') {
					toggleTheme()
					return
				}
		
				if (theme === 'System' || !theme ) {
					!window.matchMedia("(prefers-color-scheme: dark)").matches && toggleTheme()
					return
				}
			}
			const currentTheme = localStorage.getItem("prefers-color-scheme")
		
			setTheme(currentTheme)
		</script>		
		<Header {menuSecondary}>
			<Fragment slot="visualid">
				<AzionLogo
					target="_self"
					href={`/${lang}/`}
					hrefTitle="Home | Azion Technologies"
				/>
			</Fragment>
			
			<Fragment slot="navigation">
				<HeaderMenuTabPanel
					client:idle
					menuData={menuData}
				/>
			</Fragment>

			<Fragment slot="dialog">
				<HeaderSearchDialog
					client:only="vue"
					algoliaAppId="PYJUZH6VNQ"
					algoliaApiKey="7c1795c333053265edd2aeb199745797"
					algoliaIndex={algoliaIndex}
					algoliaModel={algoliaModel}
					inputPlaceholder={algoliaInputPlaceholder}
				/>
			</Fragment>

			<Fragment slot="mobile-right-sidebar">
				<HeaderRightSidebar
					class="pt-8 pb-8"
					client:idle
					menuData={menuData}
					menuSecondary={menuSecondaryMobile}
					bottomButtons={bottomButtonsMobile}
				>	
					<Fragment slot="main-content">
						<SidebarPanelMenu
							client:idle
							lang={lang}
							data={sidebarSections.map((item) => {
								item.hasLabel = (item.hasLabel ? t(item.hasLabel) : '');
								return item;
							})}
							currentPageMatch={currentPageMatch} />
					</Fragment>
				</HeaderRightSidebar>
			</Fragment>
		</Header>

		<script is:inline>
      (function() {
        window.addEventListener("scroll", (event) => {
          const scrollY = window.scrollY;
          const headerButtonDestak = document.querySelectorAll('header .header-button-destak')[0];
          const spanText = headerButtonDestak.querySelectorAll('span')[0];

          if(scrollY <= 500) {
            if (headerButtonDestak.classList.contains('p-button-secondary')) {
              return;
            }

            headerButtonDestak.classList.remove('p-button-primary');
            headerButtonDestak.classList.add('p-button-secondary');
            headerButtonDestak.classList.add('!text-[#000000]');
            headerButtonDestak.classList.add('!bg-[#ffffff]');

            spanText.classList.add('text-black');
            spanText.classList.remove('text-white');
          } else {
            if (headerButtonDestak.classList.contains('p-button-primary')) {
              return;
            }

            headerButtonDestak.classList.remove('p-button-secondary');
            headerButtonDestak.classList.remove('!text-[#000000]');
            headerButtonDestak.classList.remove('!bg-[#ffffff]');

            headerButtonDestak.classList.add('p-button-primary');
            headerButtonDestak.classList.remove('!text-[#ffffff]');

            spanText.classList.remove('text-black');
            spanText.classList.add('text-white');
          }
        });
      })();
    </script>

		<main class="layout">
			<aside id="left-sidebar" class="border-r surface-border pt-8 pb-1">
				<div class="sidebar">
					<LeftSidebar
						currentPage={currentPage}
						menuType={content.menu_namespace}
					/>
				</div>
			</aside>

			<div id="main-content" class="main-column pt-4 pb-6">
				<slot />
			</div>

			<aside id="right-sidebar" class="pt-8 pb-1">
				<div class="sidebar">
					<slot name="secondary-sidebar" />
				</div>
			</aside>
		</main>

		<Fragment slot="footer">
			<Footer {lang} {listData} {copyright} {cta} {socialButtons}>
				<Fragment slot="action">
					<SelectLang
						{lang}
						i18nPages={translatedPages.map((page) => {
							return {
								langPrefix: page.lang,
								slug: `/${page.lang}/${page.slug}/`,
								lang: page.lang === 'pt-br' ? 'PortuguÃªs' : 'English'
							};
						})}
						client:visible={{rootMargin: "600px"}}
					/>
				</Fragment>
				<Fragment slot="system-status">
					<SystemStatus
						{lang}
						client:visible={{rootMargin: "600px"}}
					/>
				</Fragment>
				<Fragment slot="theme-switch">
					<ThemeSwitcher client:visible={{rootMargin: "600px"}} />
				</Fragment>
			</Footer>
		</Fragment>

		<Trd3 />
	</body>
</html>
